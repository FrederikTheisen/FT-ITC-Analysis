// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using Foundation;
using AppKit;

namespace AnalysisITC
{
    public class ResultViewDataSource : NSTableViewDataSource
    {
        public List<Solution> Data { get; private set; }

        public double KdMag { get; set; } = -1;

        public ResultViewDataSource(AnalysisResult result)
        {
            Data = result.Solution.Solutions;
        }

        public override nint GetRowCount(NSTableView tableView)
        {
            return Data.Count;
        }
    }

    public class ResultViewDelegate : NSTableViewDelegate
    {
        const string CellIdentifier = "Cell";

        public double KdMag => DataSource.KdMag;

        private ResultViewDataSource DataSource;

        public ResultViewDelegate(ResultViewDataSource datasource)
        {
            this.DataSource = datasource;
        }

        public override NSView GetViewForItem(NSTableView tableView, NSTableColumn tableColumn, nint row)
        {
            // This pattern allows you reuse existing views when they are no-longer in use.
            // If the returned view is null, you instance up a new view
            // If a non-null view is returned, you modify it enough to reflect the new data
            NSTextField view = (NSTextField)tableView.MakeView(CellIdentifier, this);
            if (view == null)
            {
                view = new NSTextField();
                view.Identifier = CellIdentifier;
                view.BackgroundColor = NSColor.Clear;
                view.Bordered = false;
                view.Selectable = false;
                view.Editable = false;
            }

            // Setup view based on the column selected
            switch (tableColumn.Title)
            {
                case "Temperature": view.StringValue = DataSource.Data[(int)row].T.ToString("F2"); break;
                case "N-value": view.StringValue = DataSource.Data[(int)row].N.ToString("F2"); view.Alignment = NSTextAlignment.Center; break;
                case "Kd": view.StringValue = DataSource.Data[(int)row].Kd.AsDissociationConstant(KdMag); view.Alignment = NSTextAlignment.Center; break;
                case "∆H": view.StringValue = DataSource.Data[(int)row].Enthalpy.ToString(EnergyUnit.KiloJoule, withunit: false); view.Alignment = NSTextAlignment.Center; break;
                case "-T∆S": view.StringValue = DataSource.Data[(int)row].TdS.ToString(EnergyUnit.KiloJoule, withunit: false); view.Alignment = NSTextAlignment.Center; break;
                case "∆G": view.StringValue = DataSource.Data[(int)row].GibbsFreeEnergy.ToString(EnergyUnit.KiloJoule, withunit: false); view.Alignment = NSTextAlignment.Center; break;
                case "Loss": view.StringValue = DataSource.Data[(int)row].Loss.ToString("G3"); view.Alignment = NSTextAlignment.Center; break;
            }

            return view;
        }
    }

	public partial class BindingAnalysisViewController : NSViewController
	{
        public static AnalysisResult AnalysisResult { get; set; }

		public BindingAnalysisViewController (IntPtr handle) : base (handle)
		{
            
		}

        public override void ViewDidAppear()
        {
            base.ViewDidAppear();

            Setup();
        }

        public void Setup()
        {
            var kd = AnalysisResult.Solution.Solutions.Average(s => s.Kd);

            var mag = Math.Log10(kd);

            var kdunit = mag switch
            {
                > 0 => "M",
                > -3 => "mM",
                > -6 => "µM",
                > -9 => "nM",
                > -12 => "pM",
                _ => "M"
            };

            var source = new ResultViewDataSource(AnalysisResult)
            {
                KdMag = mag
            };
            ResultsTableView.DataSource = source;
            ResultsTableView.Delegate = new ResultViewDelegate(source);
            ResultsTableView.TableColumns()[2].Title += " " + kdunit;
            ResultsTableView.TableColumns()[3].Title += " " + DataManager.Unit.GetUnit();
            ResultsTableView.TableColumns()[4].Title += " " + DataManager.Unit.GetUnit();
            ResultsTableView.TableColumns()[5].Title += " " + DataManager.Unit.GetUnit();
        }

        partial void CloseButtonClicked(NSObject sender)
        {
            this.DismissViewController(this);
        }
    }
}
