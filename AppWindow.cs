// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;
using System.Collections.Generic;
using System.Linq;

namespace AnalysisITC
{
	public partial class AppWindow : NSWindow, INSDraggingDestination
    {
		public AppWindow (IntPtr handle) : base (handle)
		{
            Initialize();
		}

        void Initialize()
        {
            RegisterForDraggedTypes(new string[] { "NSFilenamesPboardType" });
        }

        public override void SetContentSize(CGSize aSize)
        {
            base.SetContentSize(aSize);
        }

        [Export("performDragOperation:")]
        public bool PerformDragOperation(NSDraggingInfo sender)
        {
            Highlight(false);

            // Get the dragged file URLs
            var pasteboard = sender.DraggingPasteboard;
            var nsurls = pasteboard.GetPropertyListForType(NSPasteboard.NSFilenamesType) as NSArray;

            if (nsurls != null)
            {
                var urls = nsurls.Select(fileUrl => NSUrl.CreateFileUrl(fileUrl.ToString(), null));

                foreach (NSUrl url in urls)
                {
                    AppEventHandler.PrintAndLog($"Dropped file: {url}");
                }

                DataReaders.DataReader.Read(urls);

                return true;
            }
            return false;
        }

        [Export("draggingEntered:")]
        public NSDragOperation DraggingEntered(NSDraggingInfo sender)
        {
            var canBeDropped = false;
            var readableFiles = 0;
            var pasteboard = sender.DraggingPasteboard;
            var fileUrls = pasteboard.GetPropertyListForType(NSPasteboard.NSFilenamesType) as NSArray;

            if (fileUrls != null)
            {
                foreach (NSString fileUrl in fileUrls)
                {
                    var path = fileUrl.LastPathComponent;
                    var format = DataReaders.DataReader.GetFormat(path);

                    if (format != DataReaders.ITCDataFormat.Unknown)
                    {
                        readableFiles++;
                        canBeDropped = true;
                    }
                }

                StatusBarManager.SetStatus($"Drop {readableFiles} File(s)?", 0, 1);
            }

            Highlight(canBeDropped);
            return canBeDropped ? NSDragOperation.Copy : NSDragOperation.None;
        }

        [Export("draggingExited:")]
        public void DraggingExited(NSDraggingInfo sender)
        {
            // Unhighlight the window
            StatusBarManager.ClearAppStatus();
            Highlight(false);
        }

        private void Highlight(bool highlight)
        {
            // Change the appearance of the window to indicate if the file can be dropped
            if (highlight)
            {
                //Appearance = NSAppearance.GetAppearance(NSAppearance.NameAqua);
            }
            else
            {
                Appearance = null;
            }
        }
    }
}
