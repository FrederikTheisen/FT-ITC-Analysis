// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using AppKit;
using AnalysisITC.GUI;

namespace AnalysisITC
{
	public partial class PreferencesViewController : NSViewController
	{
        ColorSchemes ColorScheme;

		public PreferencesViewController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var list = AppColors.GetColorSchemes();

            foreach (var scheme in list)
            {
                ColorMenu.AddItem(new NSMenuItem(scheme.ToString(), (sender, e) => ColorMenuHandler((NSMenuItem)sender,scheme))
                {
                    State = AppSettings.ColorScheme == scheme ? NSCellStateValue.On : NSCellStateValue.Off,
                });
            }
        }

        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            ColorScheme = AppSettings.ColorScheme;
            ColorMenu.Items[0].Title = ColorScheme.ToString();
            ColorThemeModeControl.SelectedSegment = (int)AppSettings.ColorShcemeGradientMode;

            RefTempField.StringValue = AppSettings.ReferenceTemperature.ToString("F2");
            MinTempSpanSlider.DoubleValue = AppSettings.MinimumTemperatureSpanForFitting;
            TempSpanLabel.DoubleValue = AppSettings.MinimumTemperatureSpanForFitting;
            DefaultErrorMethodControl.SelectedSegment = (int)AppSettings.DefaultErrorEstimationMethod;
            IncludeConcVarianceCheck.State = AppSettings.IncludeConcentrationErrorsInBootstrap ? NSCellStateValue.On : NSCellStateValue.Off;
            DefaultBootstrapIterationSlider.DoubleValue = Math.Log10(AppSettings.DefaultBootstrapIterations);
            FuncToleranceSlider.DoubleValue = -Math.Sqrt(-Math.Log10(AppSettings.OptimizerTolerance));
            EnergyUnitControl.SelectedSegment = AppSettings.EnergyUnit.IsSI() ? 0 : 1;
            DefaultBootstrapIterationLabel.StringValue = ((int)Math.Pow(10, DefaultBootstrapIterationSlider.DoubleValue)).ToString();

            SetFuncToleranceLabel(AppSettings.OptimizerTolerance);
        }

        public void ColorMenuHandler(NSMenuItem sender, ColorSchemes e)
        {
            ColorMenu.Items[0].Title = e.ToString();

            foreach (var item in ColorMenu.Items) item.State = NSCellStateValue.Off;

            sender.State = NSCellStateValue.On;

            ColorScheme = e;
        }

        partial void DefaultBootstrapIterationAction(NSSlider sender)
        {
            DefaultBootstrapIterationLabel.StringValue = ((int)Math.Pow(10, DefaultBootstrapIterationSlider.DoubleValue)).ToString();
        }

        partial void FuncToleranceAction(NSSlider sender)
        {
            var value = sender.DoubleValue;

            SetFuncToleranceLabel(Math.Pow(10, -(value * value)));
        }

        partial void Apply(NSObject sender)
        {
            if (double.TryParse(RefTempField.StringValue, out var val))
            {
                AppSettings.ReferenceTemperature = val;
            }

            var energyunit = EnergyUnitControl.SelectedSegment == 0 ? EnergyUnit.KiloJoule : EnergyUnit.KCal;

            if (energyunit.IsSI() != AppSettings.EnergyUnit.IsSI()) //Check if changed to other unit type, update if changed
            {
                AppSettings.EnergyUnit = energyunit;
            }

            AppSettings.MinimumTemperatureSpanForFitting = MinTempSpanSlider.DoubleValue;

            //Color
            AppSettings.ColorScheme = ColorScheme;
            AppSettings.ColorShcemeGradientMode = (ColorShcemeGradientMode)(int)ColorThemeModeControl.SelectedSegment;

            //Fitting
            AppSettings.DefaultErrorEstimationMethod = (ErrorEstimationMethod)(int)DefaultErrorMethodControl.SelectedSegment;
            AppSettings.IncludeConcentrationErrorsInBootstrap = IncludeConcVarianceCheck.State == NSCellStateValue.On;
            AppSettings.DefaultBootstrapIterations = (int)Math.Pow(10, DefaultBootstrapIterationSlider.DoubleValue);
            AppSettings.OptimizerTolerance = Math.Max(Math.Pow(10, -(FuncToleranceSlider.DoubleValue * FuncToleranceSlider.DoubleValue)), double.Epsilon);

            AppSettings.Save();

            this.DismissViewController(this);
        }

        partial void Close(NSObject sender)
        {
            this.DismissViewController(this);
        }

        void SetFuncToleranceLabel(double value)
        {
            if (value < double.Epsilon) value = double.Epsilon;
            FuncToleranceLabel.DoubleValue = value;
        }
    }
}
