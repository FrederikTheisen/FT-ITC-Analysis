// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace AnalysisITC
{
	public partial class ExperimentDetailsPopoverController : NSViewController
	{
        public static event EventHandler UpdateTable;

		public static ExperimentData Data { get; set; } = null;

        public ExperimentDetailsPopoverController() : base()
        {

        }

		public ExperimentDetailsPopoverController (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidAppear()
        {
            base.ViewDidAppear();

            ExperimentNameField.StringValue = Data.FileName;
			CellConcentrationField.DoubleValue = Data.CellConcentration.Value * 1000000;
            if (Data.CellConcentration.HasError) CellConcentrationErrorField.DoubleValue = Data.CellConcentration.SD * 1000000;
			SyringeConcentrationField.DoubleValue = Data.SyringeConcentration * 1000000;
            if (Data.SyringeConcentration.HasError) SyringeConcentrationErrorField.DoubleValue = Data.SyringeConcentration.SD * 1000000;
            TemperatureField.DoubleValue = Data.MeasuredTemperature;
        }

        partial void Apply(NSObject sender)
        {
            Data.SyringeConcentration = new(SyringeConcentrationField.DoubleValue / 1000000, SyringeConcentrationErrorField.DoubleValue / 1000000);
            Data.CellConcentration = new(CellConcentrationField.DoubleValue / 1000000, CellConcentrationErrorField.DoubleValue / 1000000);
            Data.MeasuredTemperature = TemperatureField.DoubleValue;
            if (!string.IsNullOrEmpty(ExperimentNameField.StringValue)) Data.FileName = ExperimentNameField.StringValue;

            DataReaders.RawDataReader.ProcessInjections(Data);

            DismissViewController(this);

            UpdateTable?.Invoke(this, null);
        }

        partial void Cancel(NSObject sender)
        {
            DismissViewController(this);
        }
    }
}
