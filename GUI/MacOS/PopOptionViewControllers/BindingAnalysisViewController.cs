// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using Foundation;
using AppKit;
using AnalysisITC.AppClasses.Analysis2;

namespace AnalysisITC
{
	public partial class BindingAnalysisViewController : NSViewController
	{
        public static AnalysisResult AnalysisResult { get; set; }

        EnergyUnit EnergyUnit => (int)EnergyUnitControl.SelectedSegment switch { 0 => EnergyUnit.Joule, 1 => EnergyUnit.KiloJoule, 2 => EnergyUnit.Cal, 3 => EnergyUnit.KCal, _ => EnergyUnit.KiloJoule, };
        public bool UseKelvin => TemperatureUnitControl.SelectedSegment == 1;
        double Mag = -1;

        public BindingAnalysisViewController (IntPtr handle) : base (handle)
		{
            
		}

        public override void ViewDidAppear()
        {
            Graph.Initialize(AnalysisResult, EnergyUnit.KiloJoule);

            Setup();
        }

        void Setup()
        {
            string fit = "";
            string dataset = "";

            if (this.NextResponder is NSWindow) (this.NextResponder as NSWindow).Title = AnalysisResult.FileName;

            fit += AnalysisResult.Solution.SolutionName + Environment.NewLine;
            dataset += AnalysisResult.Solution.Solutions.Count + " experiments" + Environment.NewLine;
            fit += Extensions.GetEnumDescription(AnalysisResult.Solution.Convergence.Algorithm) + Environment.NewLine;
            fit += AnalysisResult.Solution.Convergence.Iterations + " | " + AnalysisResult.Solution.Loss.ToString("G3") + " | " + AnalysisResult.Solution.Convergence.Time.TotalMilliseconds.ToString("F0") + "ms" + Environment.NewLine;
            fit += AnalysisResult.Solution.BootstrapIterations + " | " + AnalysisResult.Solution.BootstrapTime.TotalSeconds.ToString("F1") + "s";

            if (AnalysisResult.Solution.Model.Parameters.Constraints.Count > 0)
            {
                ConstraintLabel.StringValue = "";
                ConstraintKeyLabel.StringValue = "";

                foreach (var con in AnalysisResult.Solution.Model.Parameters.Constraints)
                {
                    ConstraintLabel.StringValue += con.Value.GetEnumDescription() + Environment.NewLine;
                    ConstraintKeyLabel.StringValue += con.Key.GetEnumDescription() + ":" + Environment.NewLine;
                }

                ConstraintLabel.StringValue = ConstraintLabel.StringValue.Trim();
                ConstraintKeyLabel.StringValue = ConstraintKeyLabel.StringValue.Trim();
            }
            else
            {
                ConstraintLabel.StringValue = "";
                ConstraintKeyLabel.StringValue = "No constraints";
            }

            dataset += AnalysisResult.Solution.Model.MeanTemperature.ToString("F3") + " Â°C";

            FitParameterLabel.StringValue = fit;
            DataSetParameterLabel.StringValue = dataset;
        }

        partial void CopyToClipboard(NSObject sender)
        {
            Exporter.CopyToClipboard(AnalysisResult.Solution, Mag, EnergyUnit, UseKelvin);
        }

        partial void LoadSolutionsToExperiments(NSObject sender)
        {
            StatusBarManager.SetStatus("Copying solutions to experiments...");

            foreach (var sol in AnalysisResult.Solution.Solutions)
            {
                sol.Data.UpdateSolution(sol.Model);
            }

            StatusBarManager.ClearAppStatus();
            StatusBarManager.SetStatus("Solutions updated", 2000);

            DataAnalysisViewController.InvalidateGraph();
        }

        partial void CloseButtonClicked(NSObject sender)
        {
            if (this.NextResponder is NSWindow)
            {
                var window = this.NextResponder as NSWindow;

                if (window.IsSheet) DismissViewController(this);
                else window.Close();
            }
        }
    }
}
