// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;
using static AnalysisITC.AppClasses.Analysis2.Models.SolutionInterface;

namespace AnalysisITC
{
	public partial class ExperimentDataViewCell : NSView
	{
		public static event EventHandler<ExperimentData> ExpandDataButtonClicked;

		AnalysisITCDataSource source;
		ExperimentData data;
		int row;
		int ContentIndex => source.Content.IndexOf(data);
		int DataIndex => DataManager.Data.IndexOf(data);
		public bool IsDetailedViewOpen { get; set; } = false;

		public event EventHandler<int> RemoveData;
		public event EventHandler<int> ResizeRow;

		public ExperimentDataViewCell (IntPtr handle) : base (handle)
		{
			
		}

		public void Setup(AnalysisITCDataSource source, ExperimentData data, int index)
        {
			this.source = source;
			this.data = data;
			this.row = index;

			ExpNameLabel.StringValue = data.FileName;
			Line2.StringValue = data.Date.ToString();
			Line3.StringValue = data.MeasuredTemperature.ToString("G3") + " °C | " + (data.SyringeConcentration*1000000).ToString("G3") + " µM | " + (data.CellConcentration * 1000000).ToString("G3") + " µM";

            data.SolutionChanged += Data_SolutionChanged;
            data.ProcessingUpdated += Data_ProcessingCompleted;

			ShowFitDataButton.Enabled = data.Solution != null;
			IncludeDataButton.State = data.Include ? NSCellStateValue.On : NSCellStateValue.Off;

			Data_ProcessingCompleted(null, null);

			Data_SolutionChanged(null, null);
        }

        private void Data_ProcessingCompleted(object sender, EventArgs e)
        {
			NSApplication.SharedApplication.InvokeOnMainThread(() =>
			{
				if (data.Processor.IntegrationCompleted)
				{
					IncludeDataButton.Image = SideBarViewController.DataDisabledImage;
					IncludeDataButton.AlternateImage = SideBarViewController.DataEnabledImage;
					IncludeDataButton.Enabled = true;
				}
				else
				{
					IncludeDataButton.Image = SideBarViewController.DataNotProcessedImage;
					IncludeDataButton.AlternateImage = SideBarViewController.DataNotProcessedImage;
					IncludeDataButton.Enabled = false;
				}

				IncludeDataButton.State = data.Include ? NSCellStateValue.On : NSCellStateValue.Off;

				SetValidSolutionLabeling();
			});
		}

        private void Data_SolutionChanged(object sender, EventArgs e)
        {
			source.InvokeOnMainThread(() =>
			{
				if (data.Solution != null)
				{
					SetValidSolutionLabeling();

					ModelFitLine.UsesSingleLineMode = false;

					var line = new NSMutableAttributedString("");

					foreach (var par in data.Solution.UISolutionParameters(FinalFigureDisplayParameters.ListView))
					{
						if (line.Length > 0)
						{
							line.Append(new NSAttributedString("\n"));
                            line.Append(Utils.MacStrings.FromMarkDownString(par.Item1 + " = ", ModelFitLine.Font));
                        }
						else line.Append(Utils.MacStrings.FromMarkDownString(par.Item1 + ": ", ModelFitLine.Font));
                        line.Append(Utils.MacStrings.FromMarkDownString(par.Item2, ModelFitLine.Font));
                    }

                    ModelFitLine.AttributedStringValue = line;
                }
				else
				{
					IsDetailedViewOpen = false;
					UpdateFitLineVisibility();
				}

				ShowFitDataButton.Enabled = data.Solution != null;
			});
		}

        partial void RemoveClick(NSObject obj)
        {
			RemoveData?.Invoke(this, ContentIndex);

			DataManager.RemoveData2(ContentIndex);
		}

        partial void ShowFitDataButtonClick(NSObject sender)
        {
			IsDetailedViewOpen = !IsDetailedViewOpen;

			UpdateFitLineVisibility();
		}

        partial void ToggleDataGlobalInclude(NSButton sender)
        {
			data.Include = sender.State == NSCellStateValue.On;

			DataManager.InvokeDataDidChange();
        }

        partial void ViewDetails(NSObject sender)
        {
			ExpandDataButtonClicked?.Invoke(this, data);
        }

        void UpdateFitLineVisibility()
        {
			ModelFitLine.Hidden = !IsDetailedViewOpen;
			AffinityLine.Hidden = true;// !IsDetailedViewOpen;
			EntropyLine.Hidden = true;//!IsDetailedViewOpen;
            EnthalpyLine.Hidden = true;//!IsDetailedViewOpen;
            NvalueLine.Hidden = true;//!IsDetailedViewOpen;

            SetValidSolutionLabeling();

			ResizeRow?.Invoke(this, row);
		}

		void SetValidSolutionLabeling()
        {
			bool isvalid = false;
			if (data.Solution != null) isvalid = data.Solution.IsValid;

			ModelFitLine.TextColor = isvalid ? NSColor.Label : NSColor.SystemRed;
			//AffinityLine.TextColor = isvalid ? NSColor.Label : NSColor.SystemRed;
			//EntropyLine.TextColor = isvalid ? NSColor.Label : NSColor.SystemRed;
			//EnthalpyLine.TextColor = isvalid ? NSColor.Label : NSColor.SystemRed;
			//NvalueLine.TextColor = isvalid ? NSColor.Label : NSColor.SystemRed;
		}
    }
}
