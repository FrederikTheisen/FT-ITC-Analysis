// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;
using System.Collections.Generic;
using System.Linq;
using static AnalysisITC.Exporter;

namespace AnalysisITC
{
	public partial class ExportAccessoryViewController : NSViewController
	{

        public ExportAccessoryViewController (IntPtr handle) : base (handle)
		{
		}

        public void Setup(ExportAccessoryViewSettings settings)
        {
            (View as ExportAccessoryView).Setup(settings);
        }

        public class ExportAccessoryViewSettings
        {
            public List<ExperimentData> Data;

            public ExportType Export;
            public bool UnifyTimeAxis;
            public bool ExportBaselineCorrectDataPoints;
            public bool ExportFittedPeaks;
            public ExportDataSelection Selection;

            public bool FittedPeakExportEnabled;
            public bool BaselineCorrectionEnabled;

            static ExportAccessoryViewSettings Default()
            {
                var settings = new ExportAccessoryViewSettings()
                {
                    Export = ExportType.Data,
                    UnifyTimeAxis = AppSettings.UnifyTimeAxisForExport,
                    ExportBaselineCorrectDataPoints = AppSettings.ExportBaselineCorrectedData,
                    ExportFittedPeaks = AppSettings.ExportFitPointsWithPeaks,
                    Selection = AppSettings.ExportSelectionMode,
                };

                settings.SetData();

                return settings;
            }

            public static ExportAccessoryViewSettings DataDefault()
            {
                var s = Default();
                s.Export = ExportType.Data;

                return s;
            }

            public static ExportAccessoryViewSettings PeaksDefault()
            {
                var s = Default();
                s.Export = ExportType.Peaks;

                return s;
            }

            public void SetData()
            {
                Data = Selection switch
                {
                    ExportDataSelection.IncludedData => DataManager.Data.Where(d => d.Include).ToList(),
                    ExportDataSelection.AllData => DataManager.Data,
                    _ => new List<ExperimentData> { DataManager.Current },
                };

                BaselineCorrectionEnabled = !Data.Any(d => d.BaseLineCorrectedDataPoints == null);
                FittedPeakExportEnabled = !Data.Any(d => d.Solution == null);

                if (!BaselineCorrectionEnabled) ExportBaselineCorrectDataPoints = false;
                if (!FittedPeakExportEnabled) ExportFittedPeaks = false;
            }
        }
    }
}
