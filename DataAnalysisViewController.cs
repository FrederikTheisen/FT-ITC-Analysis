// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;

namespace AnalysisITC
{
	public partial class DataAnalysisViewController : NSViewController
	{
        AnalysisModel SelectedAnalysisModel => (AnalysisModel)(int)ModelTypeControl.SelectedSegment;

        public DataAnalysisViewController (IntPtr handle) : base (handle)
		{
            
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            Analysis.AnalysisFinished += GlobalAnalyzer_AnalysisFinished;
            DataManager.SelectionDidChange += DataManager_SelectionDidChange;
            DataManager.DataDidChange += DataManager_DataDidChange;
        }

        private void GlobalAnalyzer_AnalysisFinished(object sender, SolverConvergence e)
        {
            StatusBarManager.StopInderminateProgress();
            StatusBarManager.ClearAppStatus();
            StatusBarManager.SetStatus(e.Iterations + " iterations, RMSD = " + e.Loss.ToString("G2"), 11000);
            StatusBarManager.SetStatus(e.Message + " | " + e.Time.TotalMilliseconds + "ms", 6000);
            StatusBarManager.SetStatus("Completed", 1500);

            GraphView.Invalidate();
        }

        private void DataManager_DataDidChange(object sender, ExperimentData e)
        {
            bool enableglobal = DataManager.Data.Count > 1;

            AnalysisModeControl.SetEnabled(enableglobal, 1);

            if (!enableglobal) AnalysisModeControl.SelectSegment(0);
        }

        private void DataManager_SelectionDidChange(object sender, ExperimentData e)
        {
            if (e != null)
            {
                GraphView.Initialize(e);
            }
        }

        partial void FeatureDrawControlClicked(NSSegmentedControl sender)
        {
            DataFittingGraph.ShowPeakInfo = sender.IsSelectedForSegment(0);
            DataFittingGraph.ShowFitParameters = sender.IsSelectedForSegment(1);
            DataFittingGraph.UseUnifiedAxes = sender.IsSelectedForSegment(2);

            GraphView.Invalidate();
        }

        partial void AnalysisModeClicked(NSSegmentedControl sender)
        {
            GlobalAffinityStyle.Hidden = sender.SelectedSegment == 0;
            GlobalEnthalpyStyle.Hidden = sender.SelectedSegment == 0;
        }

        partial void FitSimplex(NSObject sender)
        {
            StatusBarManager.StartInderminateProgress();
            StatusBarManager.SetStatus("Fitting data...", 0);

            if (AnalysisModeControl.SelectedSegment == 0)
            {
                SingleAnalysis();
            }
            else
            {
                GlobalAnalysis();
            }
        }

        void SingleAnalysis()
        {
            Analysis.Analyzer.InitializeAnalyzer(DataManager.Current);

            Analysis.Analyzer.Solve(SelectedAnalysisModel);
        }

        void GlobalAnalysis()
        {
            var estyle = (Analysis.VariableStyle)(int)EnthalpyStyleSegControl.SelectedSegment;
            var astyle = (Analysis.VariableStyle)(int)AffinityStyleSegControl.SelectedSegment;

            Analysis.GlobalAnalyzer.InitializeAnalyzer(estyle, astyle);

            if (HstepTextField.FloatValue != 0) Analysis.Hstep = HstepTextField.FloatValue;
            if (GstepTextField.FloatValue != 0) Analysis.Gstep = GstepTextField.FloatValue;
            if (CstepTextField.FloatValue != 0) Analysis.Cstep = CstepTextField.FloatValue;
            if (NstepTextField.FloatValue != 0) Analysis.Nstep = NstepTextField.FloatValue;
            if (OstepTextField.FloatValue != 0) Analysis.Ostep = OstepTextField.FloatValue;

            Analysis.GlobalAnalyzer.Solve(SelectedAnalysisModel);
        }
    }
}
